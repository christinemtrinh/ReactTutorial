{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christine Trinh\\\\Programming\\\\ReactTutorial\\\\ReactTutorial\\\\first-react-app\\\\src\\\\components\\\\Expenses\\\\ExpenseItem.js\",\n  _s = $RefreshSig$();\n// useState is a function in the React which allows us to identify values that should prompt component function to run again\nimport React, { useState } from 'react';\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\nimport \"./ExpenseItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseItem = props => {\n  _s();\n  // ISSUE 1: Can only return a single element.. trying to return the following gives an error\n  /*\r\n    <div>Date</div>\r\n    <div><h2>Title</h2></div>\r\n    <div>Amount</div>\r\n    */\n  // Work around: Wrap everything into a single <div>\n  //className is defined by the JSX designers which links the styling\n\n  //-----------------------------------------------------------------------------//\n\n  // ISSUE 2: We want to make our data dynamic rather than hard coded.\n  // Use curly braces around the variable name to insert const, or more generally, JS code i.e. {1+1} to display 2\n  /* COMMENTED OUT BELOW BECAUSE UNUSED\r\n  const expenseDate = new Date(2021, 2, 28);\r\n  const expenseTitle = 'Car Insurance';\r\n  const expenseAmount = 294.67;\r\n  */\n\n  //-----------------------------------------------------------------------------//\n\n  // ISSUE 3: We want to pass in data from a parent component.. We will use parameters to get this. Rename the function to accept an arg.\n  // function ExpenseItem() --> ExpenseItem(props)\n  // Now can access them using the names specified in calling line: props.title, props.date, props.amount\n\n  //-----------------------------------------------------------------------------//\n\n  // ISSUE 4: We want to listen for events such as click and have the app respond\n  // Note that when we call it in the JSX we do NOT use clickHandler() because then it would execute when the JSX is executed which is too early\n  // Instead we have React memorize the pointer to execute upon event occurring\n\n  // We will add a React hook (function starting with 'use') which can only be used inside a component function, and not a nested one\n  // useState will only grab the default value \n  // Requires a default value and returns an array: the first value is the variable that will be changed, second is the function that will change the value\n  // We use const because the value is not reassigned via \"=\" operator\n  const [title, setTitle] = useState(props.title);\n  const clickHandler = () => {\n    // Despite this change, it isn't reflected on the page.. The var IS changing but the component function isn't reevaluated\n    // title = 'Updatd';\n    // With useState, call the setting function from the click handler. ALSO change the value displayed in the JSX to 'title' instead of 'props.title' \n    // ! Each ExpenseItem (component instance) gets an independent state managed by React\n    setTitle('Updated!');\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"Change Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseItem, \"ceUz0wjPP/oTY3+evv2xH5hljW4=\");\n_c = ExpenseItem;\nexport default ExpenseItem;\nvar _c;\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["React","useState","ExpenseDate","Card","jsxDEV","_jsxDEV","ExpenseItem","props","_s","title","setTitle","clickHandler","className","children","date","fileName","_jsxFileName","lineNumber","columnNumber","amount","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Christine Trinh/Programming/ReactTutorial/ReactTutorial/first-react-app/src/components/Expenses/ExpenseItem.js"],"sourcesContent":["// useState is a function in the React which allows us to identify values that should prompt component function to run again\r\nimport React, { useState } from 'react';\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\nimport \"./ExpenseItem.css\";\r\n\r\nconst ExpenseItem = (props) => {\r\n  // ISSUE 1: Can only return a single element.. trying to return the following gives an error\r\n  /*\r\n    <div>Date</div>\r\n    <div><h2>Title</h2></div>\r\n    <div>Amount</div>\r\n    */\r\n  // Work around: Wrap everything into a single <div>\r\n  //className is defined by the JSX designers which links the styling\r\n\r\n  //-----------------------------------------------------------------------------//\r\n\r\n  // ISSUE 2: We want to make our data dynamic rather than hard coded.\r\n  // Use curly braces around the variable name to insert const, or more generally, JS code i.e. {1+1} to display 2\r\n  /* COMMENTED OUT BELOW BECAUSE UNUSED\r\n  const expenseDate = new Date(2021, 2, 28);\r\n  const expenseTitle = 'Car Insurance';\r\n  const expenseAmount = 294.67;\r\n  */\r\n\r\n  //-----------------------------------------------------------------------------//\r\n\r\n  // ISSUE 3: We want to pass in data from a parent component.. We will use parameters to get this. Rename the function to accept an arg.\r\n  // function ExpenseItem() --> ExpenseItem(props)\r\n  // Now can access them using the names specified in calling line: props.title, props.date, props.amount\r\n\r\n  //-----------------------------------------------------------------------------//\r\n\r\n  // ISSUE 4: We want to listen for events such as click and have the app respond\r\n  // Note that when we call it in the JSX we do NOT use clickHandler() because then it would execute when the JSX is executed which is too early\r\n  // Instead we have React memorize the pointer to execute upon event occurring\r\n\r\n  // We will add a React hook (function starting with 'use') which can only be used inside a component function, and not a nested one\r\n  // useState will only grab the default value \r\n  // Requires a default value and returns an array: the first value is the variable that will be changed, second is the function that will change the value\r\n  // We use const because the value is not reassigned via \"=\" operator\r\n  const [title, setTitle] = useState(props.title);\r\n\r\n  const clickHandler = () => {\r\n    // Despite this change, it isn't reflected on the page.. The var IS changing but the component function isn't reevaluated\r\n    // title = 'Updatd';\r\n    // With useState, call the setting function from the click handler. ALSO change the value displayed in the JSX to 'title' instead of 'props.title' \r\n    // ! Each ExpenseItem (component instance) gets an independent state managed by React\r\n    setTitle('Updated!');\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date}/>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n      <button onClick={clickHandler}>Change Title</button>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAE7B,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B;EACA;AACF;AACA;AACA;AACA;EACE;EACA;;EAEA;;EAEA;EACA;EACA;AACF;AACA;AACA;AACA;;EAEE;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACM,KAAK,CAACE,KAAK,CAAC;EAE/C,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;IACA;IACAD,QAAQ,CAAC,UAAU,CAAC;EACtB,CAAC;EAID,oBACEL,OAAA,CAACF,IAAI;IAACS,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC5BR,OAAA,CAACH,WAAW;MAACY,IAAI,EAAEP,KAAK,CAACO;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChCb,OAAA;MAAKO,SAAS,EAAC,2BAA2B;MAAAC,QAAA,gBACxCR,OAAA;QAAAQ,QAAA,EAAKJ;MAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChBb,OAAA;QAAKO,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAAC,GAAC,EAACN,KAAK,CAACY,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eACNb,OAAA;MAAQe,OAAO,EAAET,YAAa;MAAAE,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEX,CAAC;AAAAV,EAAA,CA1DKF,WAAW;AAAAe,EAAA,GAAXf,WAAW;AA4DjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}